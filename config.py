import os
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("telegram_scanner.log")
    ]
)
logger = logging.getLogger(__name__)

# Telegram API credentials - set your own API ID and HASH here
API_ID = 0  # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ API ID (Replace with your own)
API_HASH = ""  # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ API Hash (Replace with your own)

# ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶á ‡¶Æ‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
if os.environ.get("TELEGRAM_API_ID"):
    API_ID = int(os.environ.get("TELEGRAM_API_ID"))
if os.environ.get("TELEGRAM_API_HASH"):
    API_HASH = os.environ.get("TELEGRAM_API_HASH")

# Bot tokens - set your own telegram bot tokens here or use environment variables
# You can set these as environment variables, e.g. export BOT_TOKEN_1=your_token_here
BOT_TOKEN_1 = os.environ.get("BOT_TOKEN_1", "")
BOT_TOKEN_2 = os.environ.get("BOT_TOKEN_2", "")
BOT_TOKEN_3 = os.environ.get("BOT_TOKEN_3", "")
BOT_TOKEN_4 = os.environ.get("BOT_TOKEN_4", "")
BOT_TOKEN_5 = os.environ.get("BOT_TOKEN_5", "")

BOT_TOKENS = [
    BOT_TOKEN_1,
    BOT_TOKEN_2,
    BOT_TOKEN_3,
    BOT_TOKEN_4,
    BOT_TOKEN_5
]

# Remove empty tokens
BOT_TOKENS = [token for token in BOT_TOKENS if token]

# For multi-client API usage
API_IDS = [API_ID] * len(BOT_TOKENS) if BOT_TOKENS else [API_ID]
API_HASHES = [API_HASH] * len(BOT_TOKENS) if BOT_TOKENS else [API_HASH]

# Target channel where information will be posted
TARGET_CHANNEL = os.environ.get("TARGET_CHANNEL", "https://t.me/+lPc8JNy3Tis4Yzll")

# Bangladesh phone number prefixes (operators)
BD_PREFIXES = [
    "013", "014", "015", "016", "017", "018", "019"  # Bangladesh mobile prefixes
]

# Number of workers to use for concurrent processing - recommended 50-100 for VPS
NUM_WORKERS = int(os.environ.get("NUM_WORKERS", "50"))

# Delay between batches (to avoid rate limiting)
BATCH_DELAY = int(os.environ.get("BATCH_DELAY", "1"))

# Number of numbers to check in each batch - recommended 100-500 for VPS
BATCH_SIZE = int(os.environ.get("BATCH_SIZE", "200"))

# Maximum number of retries for failed operations
MAX_RETRIES = int(os.environ.get("MAX_RETRIES", "3"))

# Maximum concurrent tasks
MAX_CONCURRENT_TASKS = int(os.environ.get("MAX_CONCURRENT_TASKS", "50"))

# Total number of phone numbers to process
TOTAL_NUMBERS = int(os.environ.get("TOTAL_NUMBERS", "7000000000"))  # 700 crore by default

if not API_ID or not API_HASH:
    logger.warning("API credentials not set. Set the API_ID and API_HASH in config.py or as environment variables")

if not BOT_TOKENS:
    logger.warning("No bot tokens configured. Set bot tokens in config.py or as environment variables")

if not TARGET_CHANNEL:
    logger.warning("Target channel not set. Set TARGET_CHANNEL in config.py or as environment variable")

logger.info(f"Configured with {len(API_IDS)} API credentials and {len(BOT_TOKENS)} bot tokens")

# Test message format
TEST_MESSAGE = """
üáßüá© *‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßÄ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ*

‚úÖ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
‚úÖ ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
‚úÖ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§

üìä *‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø:*
- ‡¶Æ‡ßã‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: ‡ß≠‡ß¶‡ß¶ ‡¶ï‡ßã‡¶ü‡¶ø (‡ß≠ ‡¶¨‡¶ø‡¶≤‡¶ø‡¶Ø‡¶º‡¶®)
- ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {bot_count}‡¶ü‡¶ø
- ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: {channel}

‚è∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™: {timestamp}
"""
